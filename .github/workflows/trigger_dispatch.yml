name: Remote Dispatch Action Responder

on: [repository_dispatch]

jobs:
  process_build:
    name: Process IITC build
    runs-on: ubuntu-latest
    if: github.event.action == 'new_iitc_build' || github.event.action == 'new_iitc_prime_build'
    steps:

      - uses: actions/checkout@v4
        with:
          path: "./website"
          token: ${{ secrets.API_TOKEN_GITHUB }}
          # git restore-mtime uses the ref log to find the correct timestamp
          # for each file. This requires a full git history. The default value (1)
          # creates a shallow checkout.
          fetch-depth: 0

      - name: Setup git
        uses: ./website/.github/actions/setup-git

      - name: Setup Cloudflare Wrangler
        run: npm install -g wrangler@latest
        
      - name: Download artifact
        uses: ./website/.github/actions/download-artifact

      - name: Set base env
        run: |
          if [[ '${{ github.event.action }}' == 'new_iitc_build' ]]; then
            echo "BUILD_ZIP_FILENAME=$(cat ./artifact/.metadata/zip_filename)" >> "$GITHUB_ENV"
          elif [[ '${{ github.event.action }}' == 'new_iitc_prime_build' ]]; then
            echo "IS_PRIME_BUILD=true" >> "$GITHUB_ENV"
          fi
          echo "BUILD_TYPE=$(cat ./artifact/.metadata/build_type)" >> "$GITHUB_ENV"
          echo "COMMIT_HASH=$(cat ./artifact/.metadata/commit)" >> "$GITHUB_ENV"
          echo "BUILD_APK_FILENAME=$(cat ./artifact/.metadata/apk_filename)" >> "$GITHUB_ENV"
          echo "BUILDSTAMP=$(cat ./artifact/.metadata/buildstamp)" >> "$GITHUB_ENV"

      - name: Set env for IITC Release/Beta/PR build
        if: github.event.action == 'new_iitc_build'
        run: |
          if [[ '${{ env.BUILD_TYPE }}' == 'release' ]]; then
            echo "TARGET_DIR=build/release_archive/${{ env.BUILDSTAMP }}/" >> "$GITHUB_ENV"
            echo "TARGET_APK_FILENAME_FOR_FDROID=IITC-Mobile-${{ env.BUILDSTAMP }}.apk" >> "$GITHUB_ENV"
          fi
          if [[ '${{ env.BUILD_TYPE }}' == 'beta' ]]; then
            echo "TARGET_DIR=build/beta_archive/${{ env.BUILDSTAMP }}/" >> "$GITHUB_ENV"
            echo "TARGET_APK_FILENAME_FOR_FDROID=IITC-Mobile-Beta-${{ env.BUILDSTAMP }}.apk" >> "$GITHUB_ENV"
          fi
          if [[ '${{ env.BUILD_TYPE }}' == 'PR' ]]; then
            echo "PR_NUMBER=$(cat ./artifact/.metadata/pr_number)" >> "$GITHUB_ENV"
            echo "TARGET_DIR=build/artifact/PR$(cat ./artifact/.metadata/pr_number)/" >> "$GITHUB_ENV"
          fi

      - name: Set env for IITC Prime builds
        if: env.IS_PRIME_BUILD == 'true'
        run: |
          if [[ '${{ env.BUILD_TYPE }}' == 'beta' ]]; then
            echo "TARGET_APK_FILENAME_FOR_FDROID=IITC-Prime-Beta-${{ env.BUILDSTAMP }}.apk" >> "$GITHUB_ENV"
          else
            echo "TARGET_APK_FILENAME_FOR_FDROID=IITC-Prime-${{ env.BUILDSTAMP }}.apk" >> "$GITHUB_ENV"
          fi

      - name: Restore correct mtime
        run: |
          sudo apt install git-restore-mtime
          cd ./website/
          git restore-mtime

      - name: Delete old builds
        if: github.event.action == 'new_iitc_build'
        run: |
          # Getting the list of open PRs sorted by last update date
          open_prs=$(curl -s "https://api.github.com/repos/${{ github.event.client_payload.repo.owner }}/${{ github.event.client_payload.repo.repo }}/pulls?state=open&sort=updated&direction=desc" | jq -r '.[].number')
          
          # Converting a PR list to an array
          open_prs_combined=" $(echo "$open_prs" | tr '\n' ' ') "
          
          cd ./website/
          
          # Removing artifacts for which there are no active PRs
          ARTIFACTS_DIR="./static/build/artifact"
          for dir in "$ARTIFACTS_DIR"/*; do
            if [ -d "$dir" ]; then
              pr_number=$(basename "$dir")
              if [[ ! $open_prs_combined =~ " ${pr_number/PR/} " ]]; then
                rm -rf "$dir"
              fi
            fi
          done

          # Deleting old beta versions
          ls -trd ./static/build/beta_archive/* | head -n -50 | xargs --no-run-if-empty git rm -r

      - name: Copy IITC files to website
        if: github.event.action == 'new_iitc_build'
        run: |
          mkdir -p ./website/static/${{ env.TARGET_DIR }}
          cp -r ./artifact/build/* ./website/static/${{ env.TARGET_DIR }}

      - name: Download existing APKs from R2
        if: env.TARGET_APK_FILENAME_FOR_FDROID != ''
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          mkdir -p ./website/static/fdroid/repo/

          echo "Downloading existing APKs from R2..."
          while read -r filename; do
            if [ -n "$filename" ]; then
              echo "Downloading $filename..."
              wrangler r2 object get ${{ secrets.R2_BUCKET_NAME }}/fdroid/repo/$filename --file "./website/static/fdroid/repo/$filename" --remote || echo "Failed to download $filename"
            fi
          done < "./website/static/fdroid/r2_apk_list.txt"

      - name: Copy APK to F-Droid repo
        if: env.TARGET_APK_FILENAME_FOR_FDROID != ''
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Copy new APK
          cp ./artifact/build/${{ env.BUILD_APK_FILENAME }} ./website/static/fdroid/repo/${{ env.TARGET_APK_FILENAME_FOR_FDROID }}
          
          # Upload new APK to R2
          echo "Uploading new APK to R2..."
          wrangler r2 object put ${{ secrets.R2_BUCKET_NAME }}/fdroid/repo/${{ env.TARGET_APK_FILENAME_FOR_FDROID }} \
            --file ./website/static/fdroid/repo/${{ env.TARGET_APK_FILENAME_FOR_FDROID }} --remote
          
          # Add new APK to the list (if not already there)
          if ! grep -q "${{ env.TARGET_APK_FILENAME_FOR_FDROID }}" "./website/static/fdroid/r2_apk_list.txt"; then
            echo "${{ env.TARGET_APK_FILENAME_FOR_FDROID }}" >> "./website/static/fdroid/r2_apk_list.txt"
          fi

      - name: Setup F-Droid server
        if: env.BUILD_TYPE != 'PR'
        uses: ./website/.github/actions/setup-fdroid
        with:
          keystore_p12: ${{ secrets.KEYSTORE_P12 }}
          config_yml: ${{ secrets.CONFIG_YML }}

      - name: Clean up archived APKs from R2 and remove local APKs
        if: env.TARGET_APK_FILENAME_FOR_FDROID != ''
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Remove archived APKs from R2 (F-Droid moves old versions to archive/)
          if [ -d "./website/static/fdroid/archive" ]; then
            echo "Cleaning up archived APKs from R2..."
            find ./website/static/fdroid/archive -name "*.apk" -type f | while read -r archived_apk; do
              filename=$(basename "$archived_apk")
              echo "Removing $filename from R2..."
              wrangler r2 object delete ${{ secrets.R2_BUCKET_NAME }}/fdroid/repo/$filename --remote || echo "Failed to delete $filename from R2"
              
              # Remove from APK list file
              grep -v "^$filename$" "./website/static/fdroid/r2_apk_list.txt" > "./website/static/fdroid/r2_apk_list.txt.tmp" || true
              mv "./website/static/fdroid/r2_apk_list.txt.tmp" "./website/static/fdroid/r2_apk_list.txt"
            done
          fi
          
          echo "Removing local APK files..."
          find ./website/static/fdroid/repo -name "*.apk" -type f -delete || echo "No APK files to remove"

      - name: Save changes
        run: |
          cd ./website/
          rm -rf ./website/static/fdroid/archive
          git add -A static/build/ static/fdroid/repo/ static/fdroid/r2_apk_list.txt

      - name: Commit and push changes
        run: |
          cd ./website/
          COMMIT_URL="https://github.com/${{ github.event.client_payload.repo.owner }}/${{ github.event.client_payload.repo.repo }}/commit/${{ env.COMMIT_HASH }}"
          if [[ '${{ env.BUILD_TYPE }}' == 'PR' ]]; then
            git commit -m "ðŸ¤– New build PR â„–${{ env.PR_NUMBER }} from $COMMIT_URL"
          elif [[ '${{ env.IS_PRIME_BUILD }}' == 'true' ]]; then
            git commit -m "ðŸ¤– New IITC Prime ${{ env.BUILD_TYPE }} build from $COMMIT_URL"
          else
            git commit -m "ðŸ¤– New IITC ${{ env.BUILD_TYPE }} build from $COMMIT_URL"
          fi
          git push origin master
